// helpers/csvExport.js
import { utils, writeFileXLSX } from "xlsx";
import dayjs from "dayjs";
import { authStore } from "../store/authStore";

const auth = authStore;

/* ---------------- CSV Export ---------------- */
export async function csvExport({ headers = [], rows = [], title = "Report", fileName = "export.csv" } = {}) {
  try {
    const orgName = auth?.user?.org_name ?? "Azonation";
    const today = dayjs().format("YYYY-MM-DD");

    // Normalize headers
    const normalizedHeaders = headers.map(h => ({
      text: h.text ?? h.label ?? String(h.value ?? ""),
      value: h.value ?? h.key ?? String(h.text ?? ""),
    }));

    const headerLabels = normalizedHeaders.map(h => h.text);

    // Prepare data rows
    const dataRows = rows.map(item =>
      normalizedHeaders.map(h => {
        if (typeof h.value === "function") {
          try { return h.value(item); } catch { return ""; }
        }
        return item[h.value] ?? item[h.text] ?? "";
      })
    );

    const exportData = [];

    // Spacing and Title
    exportData.push([]); // empty row on top
    exportData.push([orgName]); // org name
    exportData.push([title]); // report title
    exportData.push([]); // empty row before table

    // Table header
    exportData.push(headerLabels);

    // Table rows
    exportData.push(...dataRows);

    // Footer
    exportData.push([]);
    const footerText = `Generated by ${orgName} on ${today} | Items 1â€“${rows?.length ?? 0} of ${rows?.length ?? 0} | Page 1 of 1`;
    exportData.push([footerText]);

    // Create worksheet & workbook
    const ws = utils.aoa_to_sheet(exportData);
    const wb = utils.book_new();
    utils.book_append_sheet(wb, ws, "Sheet1");

    // Save CSV
    const safeName = /\.csv$/i.test(fileName) ? fileName : `${fileName}.csv`;
    writeFileXLSX(wb, safeName, { bookType: "csv" });

  } catch (err) {
    console.error("csvExport error:", err);
    throw err;
  }
}
