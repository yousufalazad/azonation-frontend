import {
  Document,
  Packer,
  Paragraph,
  TextRun,
  Table,
  TableRow,
  TableCell,
  AlignmentType,
  WidthType,
  BorderStyle,
  Header,
  Footer,
} from "docx";
import { saveAs } from "file-saver";
import dayjs from "dayjs";
import { authStore } from "../store/authStore";

const auth = authStore;

/* ----------------------- Main Export ----------------------- */
export async function docxExport({ headers, rows, title, fileName }) {
  const orgName = auth.user?.org_name || "Organization";
  // const generatedDate = dayjs().format("YYYY-MM-DD");
  const generatedDate = dayjs().format("DD MMM YYYY");

  const safeFileName = /\.docx$/i.test(fileName) ? fileName : `${fileName}.docx`;

  /* ---------- Header ---------- */
  const documentHeader = new Header({
    children: [
      new Paragraph({
        alignment: AlignmentType.CENTER,
        spacing: { after: 100 },
        children: [new TextRun({ text: orgName, bold: true, size: 28 })],
      }),
      new Paragraph({
        alignment: AlignmentType.CENTER,
        spacing: { after: 200 },
        children: [
          new TextRun({ text: title, italics: true, color: "555555", size: 22 }),
        ],
      }),
    ],
  });

  /* ---------- Table Header ---------- */
  const tableHeaders = headers.map(
    (h) =>
      new TableCell({
        width: { size: 100 / headers.length, type: WidthType.PERCENTAGE },
        children: [
          new Paragraph({
            alignment: AlignmentType.CENTER,
            children: [new TextRun({ text: h.text, bold: true, color: "000000" })],
          }),
        ],
        shading: { fill: "D9D9D9" },
      })
  );

  /* ---------- Table Body ---------- */
  const tableRows = rows.map((r) => {
    const cells = headers.map((h) => {
      const textValue = r[h.value] != null ? String(r[h.value]) : "";
      return new TableCell({
        width: { size: 100 / headers.length, type: WidthType.PERCENTAGE },
        children: [
          new Paragraph({
            alignment: AlignmentType.LEFT,
            children: [new TextRun({ text: textValue, color: "000000" })],
          }),
        ],
        borders: { top: { style: BorderStyle.NONE }, bottom: { style: BorderStyle.NONE }, left: { style: BorderStyle.NONE }, right: { style: BorderStyle.NONE } },
      });
    });
    return new TableRow({ children: cells });
  });

  const table = new Table({
    width: { size: 100, type: WidthType.PERCENTAGE },
    rows: [new TableRow({ children: tableHeaders }), ...tableRows],
    borders: {
      top: { style: BorderStyle.SINGLE, size: 1, color: "AAAAAA" },
      bottom: { style: BorderStyle.SINGLE, size: 1, color: "AAAAAA" },
      left: { style: BorderStyle.SINGLE, size: 1, color: "AAAAAA" },
      right: { style: BorderStyle.SINGLE, size: 1, color: "AAAAAA" },
      insideHorizontal: { style: BorderStyle.SINGLE, size: 0, color: "DDDDDD" },
      insideVertical: { style: BorderStyle.SINGLE, size: 0, color: "DDDDDD" },
    },
  });

  /* ---------- Custom Footer (3-Part Layout, no bg or borders) ---------- */
 /* ---------- Custom Footer (3-Part Layout, no bg or borders) ---------- */
const footerTable = new Table({
  width: { size: 100, type: WidthType.PERCENTAGE },
  rows: [
    new TableRow({
      children: [
        new TableCell({
          children: [
            new Paragraph({
              alignment: AlignmentType.LEFT,
              children: [
                new TextRun({
                  text: `Generated by Azonation on ${generatedDate}`,
                  italics: true,
                  color: "374151",
                }),
              ],
            }),
          ],
          width: { size: 33, type: WidthType.PERCENTAGE },
          borders: { top: { style: BorderStyle.NONE }, bottom: { style: BorderStyle.NONE }, left: { style: BorderStyle.NONE }, right: { style: BorderStyle.NONE } },
        }),
        new TableCell({
          children: [
            new Paragraph({
              alignment: AlignmentType.CENTER,
              children: [
                new TextRun({
                  text: `Items 1â€“${rows?.length ?? 0} of ${rows?.length ?? 0}`,
                  italics: true,
                  color: "374151",
                }),
              ],
            }),
          ],
          width: { size: 34, type: WidthType.PERCENTAGE },
          borders: { top: { style: BorderStyle.NONE }, bottom: { style: BorderStyle.NONE }, left: { style: BorderStyle.NONE }, right: { style: BorderStyle.NONE } },
        }),
        new TableCell({
          children: [
            new Paragraph({
              alignment: AlignmentType.RIGHT,
              children: [
                new TextRun({
                  text: `Page 1 of 1`,
                  italics: true,
                  color: "374151",
                }),
              ],
            }),
          ],
          width: { size: 33, type: WidthType.PERCENTAGE },
          borders: { top: { style: BorderStyle.NONE }, bottom: { style: BorderStyle.NONE }, left: { style: BorderStyle.NONE }, right: { style: BorderStyle.NONE } },
        }),
      ],
    }),
  ],
  borders: { top: { style: BorderStyle.NONE }, bottom: { style: BorderStyle.NONE }, left: { style: BorderStyle.NONE }, right: { style: BorderStyle.NONE }, insideHorizontal: { style: BorderStyle.NONE }, insideVertical: { style: BorderStyle.NONE } },
});


  const documentFooter = new Footer({ children: [footerTable] });

  /* ---------- Build Document ---------- */
  const doc = new Document({
    sections: [
      {
        headers: { default: documentHeader },
        footers: { default: documentFooter },
        children: [table],
      },
    ],
  });

  /* ---------- Save File ---------- */
  const blob = await Packer.toBlob(doc);
  saveAs(blob, safeFileName);
}
